// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Login.pb.h"

@implementation LoginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LoginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface LoginRequest ()
@property (retain) NSString* username;
@property (retain) NSString* password;
@end

@implementation LoginRequest

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value_ {
  hasUsername_ = !!value_;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (void) dealloc {
  self.username = nil;
  self.password = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.password = @"";
  }
  return self;
}
static LoginRequest* defaultLoginRequestInstance = nil;
+ (void) initialize {
  if (self == [LoginRequest class]) {
    defaultLoginRequestInstance = [[LoginRequest alloc] init];
  }
}
+ (LoginRequest*) defaultInstance {
  return defaultLoginRequestInstance;
}
- (LoginRequest*) defaultInstance {
  return defaultLoginRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUsername) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUsername) {
    size_ += computeStringSize(1, self.username);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginRequest*) parseFromData:(NSData*) data {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromData:data] build];
}
+ (LoginRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginRequest*) parseFromInputStream:(NSInputStream*) input {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromInputStream:input] build];
}
+ (LoginRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromCodedInputStream:input] build];
}
+ (LoginRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginRequest*)[[[LoginRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginRequest_Builder*) builder {
  return [[[LoginRequest_Builder alloc] init] autorelease];
}
+ (LoginRequest_Builder*) builderWithPrototype:(LoginRequest*) prototype {
  return [[LoginRequest builder] mergeFrom:prototype];
}
- (LoginRequest_Builder*) builder {
  return [LoginRequest builder];
}
- (LoginRequest_Builder*) toBuilder {
  return [LoginRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginRequest class]]) {
    return NO;
  }
  LoginRequest *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginRequest_Builder()
@property (retain) LoginRequest* result;
@end

@implementation LoginRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LoginRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginRequest_Builder*) clear {
  self.result = [[[LoginRequest alloc] init] autorelease];
  return self;
}
- (LoginRequest_Builder*) clone {
  return [LoginRequest builderWithPrototype:result];
}
- (LoginRequest*) defaultInstance {
  return [LoginRequest defaultInstance];
}
- (LoginRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginRequest*) buildPartial {
  LoginRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LoginRequest_Builder*) mergeFrom:(LoginRequest*) other {
  if (other == [LoginRequest defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (LoginRequest_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (LoginRequest_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (LoginRequest_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (LoginRequest_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
@end

@interface LoginResponse ()
@property LoginResponse_StatusType status;
@property int32_t userId;
@end

@implementation LoginResponse

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value_ {
  hasStatus_ = !!value_;
}
@synthesize status;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.status = LoginResponse_StatusTypeSuccess;
    self.userId = 0;
  }
  return self;
}
static LoginResponse* defaultLoginResponseInstance = nil;
+ (void) initialize {
  if (self == [LoginResponse class]) {
    defaultLoginResponseInstance = [[LoginResponse alloc] init];
  }
}
+ (LoginResponse*) defaultInstance {
  return defaultLoginResponseInstance;
}
- (LoginResponse*) defaultInstance {
  return defaultLoginResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasUserId) {
    size_ += computeInt32Size(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginResponse*) parseFromData:(NSData*) data {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromData:data] build];
}
+ (LoginResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginResponse*) parseFromInputStream:(NSInputStream*) input {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromInputStream:input] build];
}
+ (LoginResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromCodedInputStream:input] build];
}
+ (LoginResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginResponse*)[[[LoginResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginResponse_Builder*) builder {
  return [[[LoginResponse_Builder alloc] init] autorelease];
}
+ (LoginResponse_Builder*) builderWithPrototype:(LoginResponse*) prototype {
  return [[LoginResponse builder] mergeFrom:prototype];
}
- (LoginResponse_Builder*) builder {
  return [LoginResponse builder];
}
- (LoginResponse_Builder*) toBuilder {
  return [LoginResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %d\n", indent, @"status", self.status];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInt:self.userId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginResponse class]]) {
    return NO;
  }
  LoginResponse *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.userId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL LoginResponse_StatusTypeIsValidValue(LoginResponse_StatusType value) {
  switch (value) {
    case LoginResponse_StatusTypeSuccess:
    case LoginResponse_StatusTypeAccountInvalid:
      return YES;
    default:
      return NO;
  }
}
@interface LoginResponse_Builder()
@property (retain) LoginResponse* result;
@end

@implementation LoginResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[LoginResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LoginResponse_Builder*) clear {
  self.result = [[[LoginResponse alloc] init] autorelease];
  return self;
}
- (LoginResponse_Builder*) clone {
  return [LoginResponse builderWithPrototype:result];
}
- (LoginResponse*) defaultInstance {
  return [LoginResponse defaultInstance];
}
- (LoginResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginResponse*) buildPartial {
  LoginResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (LoginResponse_Builder*) mergeFrom:(LoginResponse*) other {
  if (other == [LoginResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (LoginResponse_StatusTypeIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (LoginResponse_StatusType) status {
  return result.status;
}
- (LoginResponse_Builder*) setStatus:(LoginResponse_StatusType) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (LoginResponse_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = LoginResponse_StatusTypeSuccess;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (LoginResponse_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (LoginResponse_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
@end

