# Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)
#
# You are free:
#
#   to Share—to copy, distribute and transmit the work, and
#   to Remix—to adapt the work
#
# Under the following conditions:
#
#   Attribution—You must attribute the work in the manner specified by the author or licensor (but not in any way that suggests that they endorse you or your use of the work.)
#
#   Share Alike—If you alter, transform, or build upon this work, you may distribute the resulting work only under the same, similar or a compatible license.
#
# With the understanding that:
#
#   Waiver—Any of the above conditions can be waived if you get permission from the copyright holder.
#
#   Other Rights—In no way are any of the following rights affected by the license:
#     your fair dealing or fair use rights;
#     the author's moral rights; and
#     rights other persons may have either in the work itself or in how the work is used, such as publicity or privacy rights.
#
#   Notice—For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do that is with a link to 
#   http://creativecommons.org/licenses/by-sa/3.0/
#
#  Created on 12-12-12.
#  Copyright (c) 2012年 imlab.cc All rights reserved.
#


package pbauth;

// HTTP GET: /gamecenter/rooms
message GameCenterResponse {
  message Room {
    required int32 roomId = 1;
    required string roomName = 2;
    required int32 numberOfUsers = 3;
    required int32 totalSeats = 4;
  }

  repeated Room rooms = 1;

}

// for RoomStatusResponse and GameStatusResponse
message User {

  enum UserStatusType {
    JOINED = 0;
    CONFIRMED = 1;
    PLAY = 2;
    END = 3;
  }

  required int32 userId = 1;
  required string userName = 2;
  required UserStatusType userStatus = 3;

}

// HTTP GET: /room/{room_id}
message RoomStatusResponse {
  enum RoomStatusType {
    JOIN_SUCCESS = 0;
    ROOM_UNAVAILABLE = 1;
    SEAT_UNAVAILABLE = 2;
    USER_INVALID = 3;
  }

  required RoomStatusType roomStatus = 1;
  repeated User users = 2;

}

// HTTP POST: /room/{room_id}/updategame
message GameStatusRequest {
  required int32 userId = 1;
  required int32 points = 2;
  required int32 time = 3;
}

// HTTP GET: /room/{room_id}/startgame
// HTTP POST: /room/{room_id}/updategame
message GameStatusResponse {

  message UserGameStatus {
    required int32 userId = 1;
    required User.UserStatusType userStatus = 2;
    required int32 points = 3;
    required int32 time = 4;
    optional string userName = 5;
  }

  repeated UserGameStatus statusList = 4;

}


